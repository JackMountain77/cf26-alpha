// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  emailVerified DateTime?

  role          Role     @default(Student)

  // --- NEW: Credentials용 비밀번호 해시 (Google은 null) ---
  password         String?

  // --- NEW: 온보딩 완료 여부 ---
  profileCompleted Boolean  @default(false)

  // --- NEW: 1:1 프로필 관계 ---
  profile          Profile?

  // --- NEW: 마케팅 수신 동의 여부 ---
  marketingOptIn   Boolean  @default(false) 

  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  Admin
  Campus
  Instructor
  Student
}

// --- NEW: 성별/학교급 Enum ---
enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

enum SchoolLevel {
  ELEMENTARY
  MIDDLE
  HIGH
  UNIVERSITY
  GENERAL
}

// --- NEW: 추가정보 테이블 (Onboarding용) ---
model Profile {
  id          String      @id @default(cuid())

  // User와 1:1
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])

  nickname    String?     // 공개이름
  age         Int?
  gender      Gender      @default(UNSPECIFIED)

  // 학생 전용
  schoolLevel SchoolLevel?
  schoolName  String?
  grade       String?     // 학년(문자 허용)

  // 강사 전용
  affiliation String?

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
